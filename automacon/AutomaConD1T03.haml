%h2 Rust's Community Automation
%i E Dunham - tw @qedunham
%br
%a{:href => "talks.edunham.net/automacon2"} Slide Link
%br 
%h3 Community Automation
%p Human interaction work is necessary for a project to be successful, but what can we automate?
%p We can build tools to offload some of this human work to other proesses.
%p Build tools that do "people things".
%p Hack social expectations -- use other systems people put in place and optimize, optimize, optimize.
%p We control:
%ul{:type => "square"}
	%li Which contributors we encourage.
	%li What code we maintain.
%p Moderation requires not only rules in place, but the enforcement of those rules.
%p Automate awareness -- leave people stuff to people, automate the rest.
%p We can build tools ("robots") that:
%ul{:type => "square"}
	%li Maintain code quality
	%li Handle basic social pleasantries -- greeting, guiding new contributors
	%li Guide work through the peipeline
%p Always maintain a repository of code that always passes all tests.
%p Bots can:
%ul{:type => "square"}
	%li Check -- Will all tests pass after we merge this code?
	%li Check -- Can we keep the tree green, ensuring all parts are tested, tests are run on every change, and we can only merge if the tests pass?
	%li Talk to people -- welcome new contributors, assign code reviewers, nag reviewers when needed.
%p "But I don't have a greeter bot!"
%p In this case, have a good set of issue and PR templates.
%p Have notifications and make sure people see the interactions with PR/code review.
%p Guide your new contributors -- Have easy-tagged issues, things that new community members can jump into.  Reward maintainers for doing triage.
%p Automate your mentorship -- Keep good docs, value docs/triage help, list introductory bugs that people can help with.
%p Automate the pipeline!  Fill out your CONTRIBUTING.md.  Put it up somewhere right near your bugs!